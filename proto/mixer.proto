// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Use relative go package so the generated file is in the current folder.
option go_package = "./proto";
package datacommons;

import "google/api/annotations.proto";

message Option {
  enum CacheChoice {
    DEFAULT = 0;
    // Only get data from main cache.
    BASE_CACHE_ONLY = 1;
  }
  CacheChoice cache_choice = 1;
}

// A graph query request in Sparql query language.
message QueryRequest {
  // Sparql query string.
  string sparql = 1;
}

// Cell in the QueryResponse
message QueryResponseCell {
  // Cell value.
  string value = 1;

  // Provenance ID.
  string provenance_id = 2;
}

// A graph query response row corresponding to the query variables in graph
// query.
message QueryResponseRow {
  // A list of QueryResponseCell.
  repeated QueryResponseCell cells = 1;
}

// Graph query response.
message QueryResponse {
  // Identifier for selected variable. Size of the header is the same as number
  // of cells for each row.
  repeated string header = 1;

  // Query results, with each row containing cells corresponding to header
  // variable order.
  repeated QueryResponseRow rows = 2;
}

// Request to translate a graph query.
message TranslateRequest {
  // String representaion of schema mappings used to translate.
  string schema_mapping = 1;

  // String representation of sparql query.
  string sparql = 2;
}

// Response of a translate request.
message TranslateResponse {
  // The translated sql.
  string sql = 1;

  // Serialized json string of the translation result
  string translation = 2;
}

// Request to get property labels.
message GetPropertyLabelsRequest {
  // The dcids of nodes.
  repeated string dcids = 1;

  Option option = 2;
}

// Response returned by GetPropertyLabels.
message GetPropertyLabelsResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get all neighboring nodes along an edge labeled by a property.
message GetPropertyValuesRequest {
  // The dcids of nodes to query for.
  repeated string dcids = 1;

  // The type of the neighboring node to query for.
  string value_type = 2;

  // The property to get adjacent nodes for.
  string property = 3;

  // Maximum number of nodes to query for.
  int32 limit = 4;

  // Direction, "in" or "out", default to "out".
  string direction = 5;

  Option option = 6;
}

// Response returned by GetPropertyValues.
message GetPropertyValuesResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get all triples linking to the given nodes.
message GetTriplesRequest {
  // The dcids of the nodes to query for.
  repeated string dcids = 1;

  // Maximum number of triples for each property and type of the neighbor.
  int32 limit = 2;

  Option option = 3;
}

// Response returned by GetTriples.
message GetTriplesResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get all population/observation information for a place.
message GetPopObsRequest {
  // DCID of a place.
  string dcid = 1;

  Option option = 2;
}

// Response of GetPopObs.
message GetPopObsResponse {
  // The JSON payload.
  string payload = 1;
}

// Represents a property value pair.
message PropertyValue {
  // The property schema
  string property = 1;

  // The value in string.
  string value = 2;
}

// Requests to get observation for all place.
message GetPlaceObsRequest {
  // The type of the place.
  string place_type = 1;

  // The type of the Statistical population.
  string population_type = 2;

  // A list of constraining property values that defines the population.
  repeated PropertyValue pvs = 3;

  // Observation date.
  string observation_date = 4;

  Option option = 5;
}

// Response of GetPlaceObs.
message GetPlaceObsResponse {
  // The JSON payload.
  string payload = 1;
}

// Represents observation time series data.
message ObsTimeSeries {
  message SourceSeries {
    reserved 2;
    map<string, double> val = 1;
    string measurement_method = 3;
    string observation_period = 4;
    string import_name = 5;
    string provenance_domain = 6;
    string unit = 7;
    string scaling_factor = 8;
  }
  map<string, double> data = 1;  // Date to value.
  string place_name = 3;
  bool is_dc_aggregate = 4;
  string place_dcid = 5;  // Only set if the key uses mid.
  repeated SourceSeries source_series = 6;
  string provenance_domain = 7;
}

// Wrapper for observation data.
message ChartStore {
  oneof val {
    ObsTimeSeries obs_time_series = 1;
  }
}

// Request message for GetStats.
message GetStatsRequest {
  // The dcids of the place.
  repeated string place = 1;

  // The dcid of the StatisticalVariable.
  string stats_var = 2;

  // (Optional) The measurement method of the observation. If not specified,
  // stats series with any measurement methods could be returned.
  string measurement_method = 4;

  // (Optional) The unit of the observation. If not specified, stats series with
  // any unit could be returned.
  string unit = 5;

  // (Optional) The observation period of the observation. If not specified,
  // stats series with any observation period could be returned.
  string observation_period = 6;
}

// Response of GetStats
message GetStatsResponse {
  // The JSON payload.
  string payload = 2;
}

// Request to get certain population for a set of places.
message GetPopulationsRequest {
  // DCIDs for a list of places.
  repeated string dcids = 1;

  // Population type.
  string population_type = 2;

  // A list of constraining property values that define the population.
  repeated PropertyValue pvs = 3;

  Option option = 4;
}

// Response of GetPopulation.
message GetPopulationsResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get observation given a list of population and observation
// properties.
message GetObservationsRequest {
  // Population for a list of populations.
  repeated string dcids = 1;

  // The measured property of the observation.
  string measured_property = 2;

  // The observation date.
  string observation_date = 3;

  // The statistics type, like "measured_value", "median_value", etc...
  // TODO: Change the variable name to 'stat_type' to be consistent.
  string stats_type = 4;

  // (Optional) Observation period like "P1Y", "P3M" etc...
  string observation_period = 5;

  // (Opitonal) Measurement method used to get the observation.
  string measurement_method = 6;

  Option option = 7;
}

// Response of GetObservation request.
message GetObservationsResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get places that are contained in parent places.
message GetPlacesInRequest {
  // The parent place dcids.
  repeated string dcids = 1;

  // The child place type.
  string place_type = 2;
}

// Response of GetPlacesIn.
message GetPlacesInResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get related locations of a place for given stat var DCIDs.
message GetRelatedLocationsRequest {
  // Place DCID.
  string dcid = 1;

  repeated string stat_var_dcids = 2;

  // (Optional) Whether to require all related places under the same ancestor.
  string within_place = 4;

  // (Optional) Whether the computation needs to be based on per capita.
  bool is_per_capita = 5;
}

// Request to get rankings of locations for given stat var DCIDs.
message GetLocationsRankingsRequest {
  repeated string stat_var_dcids = 1;

  // Place type to get rankings for.
  string place_type = 2;

  // (Optional) Whether to require all related places under the same ancestor.
  string within_place = 3;

  // (Optional) Whether the computation needs to be based on per capita.
  bool is_per_capita = 4;
}

message GetLocationsRankingsResponse {
  map<string, RelatedPlacesInfo> payload = 1;
}

// Response of GetRelatedLocations request.
message GetRelatedLocationsResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get interesting aspects for places.
message GetInterestingPlaceAspectsRequest {
  // Place DCIDs.
  repeated string dcids = 1;
}

// Response to get interesting aspects for places.
message GetInterestingPlaceAspectsResponse {
  // The JSON payload.
  string payload = 1;
}

// Request to get landing page info for places.
message GetLandingPageRequest {
  // Place DCIDs.
  repeated string dcids = 1;
  // A list of stat vars used for filtering. If empty, then no filtering.
  repeated string stat_var_dcids = 2;
}

// Response to get landing page info for places.
message GetLandingPageResponse {
  // The JSON payload.
  string payload = 1;
}


// Request to get all stat data in landing page for a place.
message GetLandingPageDataRequest {
  // The dcid of the place.
  string place = 1;
  // A list of all stat vars used in the landing page.
  repeated string stat_vars = 2;
  // Seed value for random selection. Used by test to get deterministic result.
  int64 seed = 3;
}

// Response to get landing page info for places.
message GetLandingPageDataResponse {
  string payload = 3;
}

// Search request sent to the mixer.
message SearchRequest {
  // Search query which is just a plain text string, e.g. "california".
  // This is not a datalog query, but a plain text query. The mixer is free
  // to choose an interpretation of the query, e.g. using NLP or just plain
  // keyword search and return relevant entities from the graph.
  string query = 1;

  // Maximum number of entities to return.
  int32 max_results = 2;
}

// Search response from mixer.
message SearchResponse {
  // Matching entities broken down by type.
  repeated SearchResultSection section = 1;
}

// Wrapper for all entities returned from search which belong to a single type.
message SearchResultSection {
  // Type of entities in this section.
  string type_name = 1;

  // List of entities in this section.
  repeated SearchEntityResult entity = 2;
}

// Data for a single entity returned by the search endpoint.
message SearchEntityResult {
  // DCID of the entity.
  string dcid = 1;

  // Name of the entity.
  string name = 2;
}

// StatsVars represent a list of statistical variable dcids.
message StatsVars {
  repeated string statsVars = 1;
}

// Request message for GetPlaceStats API.
message GetPlaceStatsVarRequest {
  // DCIDs of the places.
  repeated string dcids = 1;
}

// Response message for GetPlaceStats API.
message GetPlaceStatsVarResponse {
  // A map from place dcid to a list of statistical variable dcids.
  map<string, StatsVars> places = 1;
}

// TODO(wsws): Refactor all these "won't persist to cache" fields across caches
// into a single TemporaryFields message, and clear just that "tmp_data" field
// before persistence.

// PopObsObservation holds information for an observation for the
// Population-Observation knowledge graph..
message PopObsObservation {
  reserved 21;
  string id = 1;
  string type = 2;
  string measured_prop = 3;
  double min_value = 4;
  double max_value = 5;
  double mean_value = 6;
  double median_value = 7;
  double measured_value = 8;
  double sample_size = 9;
  double margin_of_error = 10;
  double std_error = 11;
  double mean_std_error = 12;
  double sum_value = 13;
  double percentile10 = 14;
  double percentile25 = 15;
  double percentile75 = 16;
  double percentile90 = 17;
  string unit = 18;
  string measurement_method = 19;
  string provenance_id = 20;
  string observation_date = 22;
  string observation_period = 23;
  string measurement_result = 24;
  double growth_rate = 25;
  string observed_node = 26;  // Won't persist to cache.
  string comparison_operator = 27;
  double std_deviation_value = 28;
  string measurement_denominator = 29;
  string measurement_qualifier = 30;
  string scaling_factor = 31;
  repeated string measurement_variable = 32;
  string stat_type = 33;              // Won't persist to cache.
  repeated string stat_var_ids = 34;  // Only set for PopObs cache.
}

// PopObsPop holds information for a statistical population for the
// Population-Observation knowledge graph.
message PopObsPop {
  reserved 3, 4, 7;
  string pop_type = 1;
  int32 num_constraints = 2;
  repeated PopObsObservation observations = 5;
  string provenance_id = 6;
  map<string, string> property_values = 8;
  string place_id = 9;  // Won't persist to cache.
  string pop_id = 10;
  string childhood_location = 11;  // Won't persist to cache.
  // Observations whose comparedNode is this population.
  repeated PopObsObservation compared_observations = 12;
}

// PopObsPlace holds information for a place for the Population-Observation
// knowledge graph.
message PopObsPlace {
  string name = 1;
  string type = 2;
  map<string, PopObsPop> populations = 3;
  string place = 4;  // Place DCID.
  double latitude = 5;
  double longitude = 6;
  string kml_coordinates = 7;
  // Populations whose childhood location is this place.
  map<string, PopObsPop> childhood_location_populations = 8;
  repeated PopObsObservation observations = 9;
  string mid = 10;                           // Won't persist to cache.
  repeated string contained_in_places = 11;  // Won't persist to cache.
}

// PopObsCollection holds information for multiple PopObsPlace instances.
message PopObsCollection {
  repeated PopObsPlace places = 1;
}

// Basic info for an entity (subject or object).
message EntityInfo {
  string name = 1;
  repeated string types = 2;
  string dcid = 3;
  string provenance_id = 4;
  string value = 5;  // Only for object value.
}

// Basic info for a collection of entities.
message EntityInfoCollection {
  repeated EntityInfo entities = 1;
  int64 total_count = 2;  // Before potential truncation.
}

// A pair of entities linked by containedInPlace.
message ContainedInPlaceRelation {
  string parent_id = 1;
  string parent_type = 2;
  string child_id = 3;
  string child_type = 4;
}

// Triple.
message Triple {
  string subject_id = 1;
  string predicate = 2;
  string object_id = 3;
  string object_name = 4;  // Only when object_id is set.
  string object_value = 5;
  string provenance_id = 6;
  string subject_name = 7;            // Only for in arcs.
  repeated string subject_types = 8;  // Only for in arcs.
  repeated string object_types = 10;  // Only when object_id is set.
}

// A collection of triples.
message Triples {
  repeated Triple triples = 1;
  int64 total_count = 2;  // Before potential truncation.
}

// Essential provenance information.
message ProvenanceInfo {
  string provenance_id = 1;
  // Domain is obtained from the source of the provenance.
  string domain = 2;
  string import_name = 3;
}

// A full list of provenances.
message Provenances {
  repeated ProvenanceInfo provenances = 1;
}

// Full lists of in and out labels for a given node ID.
message PropertyLabels {
  repeated string in_labels = 1;
  repeated string out_labels = 2;
}

// Related places info for a given place and condition.
message RelatedPlacesInfo {
  message Ranking {
    message RankInfo {
      int32 rank = 1;
      double value = 2;
      string place_dcid = 3;
    }
    repeated RankInfo info = 1;
  }
  // The following 3 fields are set only when place is not empty.
  repeated string related_places = 1;
  int32 rank_from_top = 2;     // Starting from 1.
  int32 rank_from_bottom = 3;  // Starting from 1.

  // The following 3 fields are set only when place is empty.
  Ranking rank_all = 7;
  Ranking rank_top_1000 = 8;
  Ranking rank_bottom_1000 = 9;

  reserved 4, 5, 6;
}

// A statistical variable contains key info of population and observation.
message StatisticalVariable {
  string pop_type = 1;
  map<string, string> pvs = 2;
  string measured_prop = 3;
  string measurement_method = 4;
  string measurement_denominator = 5;
  string measurement_qualifier = 6;
  string scaling_factor = 7;
  string unit = 8;
  string stat_type = 9;
}

// Info about why a place is interesting: For the statistical variable, under
// certain constraints (place type, ancestor, per capita or not), if a place
// ranks among top or bottom, it is considered as interesting.
message InterestingPlaceAspect {
  message Aspect {
    int32 rank_from_top = 1;
    int32 rank_from_bottom = 2;
    StatisticalVariable stat_var = 3;
    string contained_in_place = 4;
    string place_type = 5;
    bool per_capita = 6;
  }
  repeated Aspect aspects = 1;
}

// Request for GetStat service.
message GetStatValueRequest {
  // dcid of the place.
  string place = 1;
  // dcid of the stat var.
  string stat_var = 2;
  // (optional) date of the stat. The latest date will be used if unspecified.
  string date = 3;
  // (optional) measurement method of the observation, ex: "CensusACS5yrSurvey".
  string measurement_method = 4;
  // (optional) observation period of the observation, ex: "P1Y".
  string observation_period = 5;
  // (optional) unit of the observation.
  string unit = 6;
  // (optional) scaling factor of the observation.
  string scaling_factor = 7;
}

message GetStatValueResponse {
  double value = 1;
}

// Request for GetStatSeries service.
message GetStatSeriesRequest {
  // dcid of the place.
  string place = 1;
  // dcid of the stat var.
  string stat_var = 2;
  // (optional) measurement method of the observation, ex: "CensusACS5yrSurvey".
  string measurement_method = 3;
  // (optional) observation period of the observation, ex: "P1Y".
  string observation_period = 4;
  // (optional) unit of the observation.
  string unit = 5;
  // (optional) scaling factor of the observation.
  string scaling_factor = 6;
}

// Response for GetStatSeries service.
message GetStatSeriesResponse {
  // A map from ISO date to stat value.
  map<string, double> series = 1;
}

// Request for GetStatAll service.
message GetStatAllRequest {
  // dcids of the place.
  repeated string places = 1;
  // dcids of the stat var.
  repeated string stat_vars = 2;
}

// Response for GetStatAll service.
// The response is a two level map, with the first level keyed by place dcid,
// and the second level keyed by the stat var dcid.
// Each leaf object contains multiple source series with <date, value> object
// and observation metadata.
//
// The response is transcoded by esp:
// https://cloud.google.com/endpoints/docs/grpc/grpc-service-config Example
// response after esp transcoding is like below.
// {
//   placeData: {
//     "geoId/01": {
//       statVarData: {
//         "statvar1": {
//           "placeName": "City of Mountain View",
//           "sourceSeries": [
//             {
//               "val": {
//                 "2008": 2116,
//                 "2009": 2155,
//                 "2010": 1633,
//                 "2011": 1509,
//                 "2012": 1581,
//                 "2013": 1867,
//                 "2014": 1770,
//                 "2015": 2201,
//                 "2016": 1913,
//                 "2017": 2138
//               },
//               "observationPeriod": "P1Y",
//               "importName": "FBIGovCrime",
//               "provenanceDomain": "fbi.gov"
//             }
//           ]
//         },
//       }
//     },
//     "geoId/02": {
//       statVarData: {
//         "statvar3": {...},
//       }
//     }
//   }
// }
message PlaceStat {
  map<string, ObsTimeSeries> stat_var_data = 3;
}

message GetStatAllResponse {
  map<string, PlaceStat> place_data = 1;
}

service Mixer {
  // Query DataCommons Graph with Sparql.
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/query"
    };
  }

  // Query DataCommons Graph with Sparql.
  rpc QueryPost(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/query"
      body: "*"
    };
  }

  // Fetch property labels adjacent of nodes
  rpc GetPropertyLabels(GetPropertyLabelsRequest)
      returns (GetPropertyLabelsResponse) {
    option (google.api.http) = {
      get: "/node/property-labels"
    };
  }

  // Fetch property labels adjacent of nodes
  rpc GetPropertyLabelsPost(GetPropertyLabelsRequest)
      returns (GetPropertyLabelsResponse) {
    option (google.api.http) = {
      post: "/node/property-labels"
      body: "*"
    };
  }

  // Fetch nodes that linked to source nodes with a given property.
  rpc GetPropertyValues(GetPropertyValuesRequest)
      returns (GetPropertyValuesResponse) {
    option (google.api.http) = {
      get: "/node/property-values"
    };
  }

  // Fetch nodes that linked to source nodes with a given property.
  rpc GetPropertyValuesPost(GetPropertyValuesRequest)
      returns (GetPropertyValuesResponse) {
    option (google.api.http) = {
      post: "/node/property-values"
      body: "*"
    };
  }

  // Fetch triples that have the given nodes as subject or object.
  rpc GetTriples(GetTriplesRequest) returns (GetTriplesResponse) {
    option (google.api.http) = {
      get: "/node/triples"
    };
  }

  // Fetch triples that have the given nodes as subject or object.
  rpc GetTriplesPost(GetTriplesRequest) returns (GetTriplesResponse) {
    option (google.api.http) = {
      post: "/node/triples"
      body: "*"
    };
  }

  // Get populations for a list of places, given the population type and
  // constraining property values.
  rpc GetPopulations(GetPopulationsRequest) returns (GetPopulationsResponse) {
    option (google.api.http) = {
      post: "/node/populations"
      body: "*"
    };
  }

  // Get observations for a list of population, given the observation
  // constraints.
  rpc GetObservations(GetObservationsRequest)
      returns (GetObservationsResponse) {
    option (google.api.http) = {
      post: "/node/observations"
      body: "*"
    };
  }

  // Get places contained in parent places.
  rpc GetPlacesIn(GetPlacesInRequest) returns (GetPlacesInResponse) {
    option (google.api.http) = {
      get: "/node/places-in"
    };
  }

  // Get places contained in parent places.
  rpc GetPlacesInPost(GetPlacesInRequest) returns (GetPlacesInResponse) {
    option (google.api.http) = {
      post: "/node/places-in"
      body: "*"
    };
  }

  // Get population and observation data for a place.
  rpc GetPopObs(GetPopObsRequest) returns (GetPopObsResponse) {
    option (google.api.http) = {
      get: "/bulk/pop-obs"
    };
  }

  // Get observation data for a list of places, given place type, population
  // type, and population constraining properties.
  rpc GetPlaceObs(GetPlaceObsRequest) returns (GetPlaceObsResponse) {
    option (google.api.http) = {
      post: "/bulk/place-obs"
      body: "*"
    };
  }

  // Get stats of places by StatisticalVariable. If multiple time series data
  // are avaialable, the highest ranked one by measurement method and import
  // will be returned.
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse) {
    option (google.api.http) = {
      post: "/bulk/stats"
      body: "*"
    };
  }

  // Get a single stat value given a place, a statistical variable and a date.
  // If no date is given, the latest statistical variable will be returned.
  rpc GetStatValue(GetStatValueRequest) returns (GetStatValueResponse) {
    option (google.api.http) = {
      get: "/stat/value"
      body: "*"
    };
  }

  // Get a series of stat value with dates, given the place and statistical
  // variable.
  rpc GetStatSeries(GetStatSeriesRequest) returns (GetStatSeriesResponse) {
    option (google.api.http) = {
      get: "/stat/series"
      body: "*"
    };
  }

  // Get all stat series given a list of places and a list of statistical
  // variables.
  rpc GetStatAll(GetStatAllRequest) returns (GetStatAllResponse) {
    option (google.api.http) = {
      post: "/stat/all"
      body: "*"
    };
  }

  // Get rankings for given stat var DCIDs.
  rpc GetLocationsRankings(GetLocationsRankingsRequest)
      returns (GetLocationsRankingsResponse) {
    option (google.api.http) = {
      get: "/node/ranking-locations"
      body: "*"
    };
  }

  // Get related locations for given stat var DCIDs.
  rpc GetRelatedLocations(GetRelatedLocationsRequest)
      returns (GetRelatedLocationsResponse) {
    option (google.api.http) = {
      post: "/node/related-locations"
      body: "*"
    };
  }

  // Get interesting aspects for places.
  rpc GetInterestingPlaceAspects(GetInterestingPlaceAspectsRequest)
      returns (GetInterestingPlaceAspectsResponse) {
    option (google.api.http) = {
      get: "/node/interesting-place-aspects"
    };
  }

  // Get landing page info for a place.
  rpc GetLandingPage(GetLandingPageRequest) returns (GetLandingPageResponse) {
    option (google.api.http) = {
      post: "/node/landing-page"
      body: "*"
    };
  }

  // Get landing page info for a place.
  rpc GetLandingPageData(GetLandingPageDataRequest) returns (GetLandingPageDataResponse) {
    option (google.api.http) = {
      post: "/landing-page"
      body: "*"
    };
  }

  // Translate Sparql Query into translation results.
  rpc Translate(TranslateRequest) returns (TranslateResponse) {
    option (google.api.http) = {
      post: "/translate"
      body: "*"
    };
  }

  // Given a text search query, return all entities matching the query.
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      get: "/search"
    };
  }

  // Give a list of place dcids, return all the statistical variables for each
  // place.
  rpc GetPlaceStatsVar(GetPlaceStatsVarRequest)
      returns (GetPlaceStatsVarResponse) {
    option (google.api.http) = {
      get: "/place/stats-var"
    };
  }
}
